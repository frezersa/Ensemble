DBSource="Z:/LWS_Db/lwcb.mdb"
StationNumber=71
if(useSQL==TRUE){
drv <-dbDriver("SQLite")
LWDB<-dbConnect(drv,DBSource)
Location<-dbGetQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
dbDisconnect(LWDB)
}else{
#Connect to Database
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
useSQL=FALSE
if(useSQL==TRUE){
drv <-dbDriver("SQLite")
LWDB<-dbConnect(drv,DBSource)
Location<-dbGetQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
dbDisconnect(LWDB)
}else{
#Connect to Database
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
list.of.packages <- c("xts","RODBC","scales","gdata","RSQLite","tools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,repos='http://cran.us.r-project.org')
#Set of functions created specifically for LWCB
suppressWarnings(suppressMessages(library(xts)))
suppressWarnings(suppressMessages(library(RODBC)))
suppressWarnings(suppressMessages(library(scales)))
suppressWarnings(suppressMessages(library(gdata)))
suppressWarnings(suppressMessages(library(RSQLite)))
suppressWarnings(suppressMessages(library(tools)))
suppressWarnings(suppressMessages(library(reshape2)))
Sys.setenv(TZ="GMT") #set time zone (not sure if this is required)
if(useSQL==TRUE){
drv <-dbDriver("SQLite")
LWDB<-dbConnect(drv,DBSource)
Location<-dbGetQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
dbDisconnect(LWDB)
}else{
#Connect to Database
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
Location<-as.numeric(Location)
#Connect to Database
if(useSQL==TRUE){
drv <-dbDriver("SQLite")
LWDB<-dbConnect(drv,DBSource)
Location<-dbGetQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
dbDisconnect(LWDB)
}else{
#Connect to Database
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
Location
#Connect to Database
if(useSQL==TRUE){
drv <-dbDriver("SQLite")
LWDB<-dbConnect(drv,DBSource)
Location<-dbGetQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
dbDisconnect(LWDB)
}else{
#Connect to Database
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
#check and install packages if required
list.of.packages <- c("xts","RODBC","scales","gdata","RSQLite","tools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,repos='http://cran.us.r-project.org')
#Set of functions created specifically for LWCB
suppressWarnings(suppressMessages(library(xts)))
suppressWarnings(suppressMessages(library(RODBC)))
suppressWarnings(suppressMessages(library(scales)))
suppressWarnings(suppressMessages(library(gdata)))
suppressWarnings(suppressMessages(library(RSQLite)))
suppressWarnings(suppressMessages(library(tools)))
suppressWarnings(suppressMessages(library(reshape2)))
Sys.setenv(TZ="GMT") #set time zone (not sure if this is required)
StationNumber=71
DBSource="Z:/LWS_Db/lwcb.mdb"
useSQL=FALSE
#Connect to Database
if(useSQL==TRUE){
drv <-dbDriver("SQLite")
LWDB<-dbConnect(drv,DBSource)
Location<-dbGetQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
dbDisconnect(LWDB)
}else{
#Connect to Database
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
Location<-as.numeric(Location)
#Connect to Database
if(useSQL==TRUE){
drv <-dbDriver("SQLite")
LWDB<-dbConnect(drv,DBSource)
Location<-dbGetQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
dbDisconnect(LWDB)
}else{
#Connect to Database
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
Location
#check and install packages if required
list.of.packages <- c("xts","RODBC","scales","gdata","RSQLite","tools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,repos='http://cran.us.r-project.org')
#Set of functions created specifically for LWCB
suppressWarnings(suppressMessages(library(xts)))
suppressWarnings(suppressMessages(library(RODBC)))
suppressWarnings(suppressMessages(library(scales)))
suppressWarnings(suppressMessages(library(gdata)))
suppressWarnings(suppressMessages(library(RSQLite)))
suppressWarnings(suppressMessages(library(tools)))
suppressWarnings(suppressMessages(library(reshape2)))
Sys.setenv(TZ="GMT") #set time zone (not sure if this is required)
StationNumber=71
DBSource="Z:/LWS_Db/lwcb.mdb"
useSQL=FALSE
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
Location
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
#check and install packages if required
list.of.packages <- c("xts","RODBC","scales","gdata","RSQLite","tools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,repos='http://cran.us.r-project.org')
#Set of functions created specifically for LWCB
suppressWarnings(suppressMessages(library(xts)))
suppressWarnings(suppressMessages(library(RODBC)))
suppressWarnings(suppressMessages(library(scales)))
suppressWarnings(suppressMessages(library(gdata)))
suppressWarnings(suppressMessages(library(RSQLite)))
suppressWarnings(suppressMessages(library(tools)))
suppressWarnings(suppressMessages(library(reshape2)))
Sys.setenv(TZ="GMT") #set time zone (not sure if this is required)
StationNumber=71
DBSource="Z:/LWS_Db/lwcb.mdb"
useSQL=FALSE
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
Location
LWDB<-odbcConnectAccess(DBSource)
Location<-sqlQuery(LWDB,paste("SELECT DailyMaster.StationNumber, Locations.Longitude, Locations.Latitude, Locations.Elevation, Locations.Drainage_Area
FROM DailyMaster INNER JOIN Locations ON DailyMaster.Location = Locations.LocationID
WHERE (((DailyMaster.StationNumber)=",StationNumber,"))",sep=""))
odbcClose(LWDB)
}
Location
??dbConnect
StationNumber=637
Range=""
DBSource = "Z:/LWS_DB/LWS_SYSTEMDB_2002.mdw"
rangestring<-unlist(strsplit(Range,"/"))
rangestring[rangestring==""]<-"1900-01-01"
# get start dates and end dates from Range
if(Range==""){start_date<-as.Date("1900-01-01");end_date<-Sys.Date()}else{
if(length(rangestring)==1){start_date<-as.Date(rangestring);end_date<-Sys.Date()}else{
start_date<-as.Date(rangestring[1]);end_date<-as.Date(rangestring[2])}}
start_date
end_date
suppressWarnings(rangestring<-as.Date(min(rangestring)))
timediff<-Sys.Date()-rangestring
#create empty time object for later
dates<-seq(from=start_date,to=end_date,by=1)
empty<-zoo(,dates)
emptyNA<-zoo(NA,dates)
library(zoo)
suppressWarnings(rangestring<-as.Date(min(rangestring)))
timediff<-Sys.Date()-rangestring
#create empty time object for later
dates<-seq(from=start_date,to=end_date,by=1)
empty<-zoo(,dates)
emptyNA<-zoo(NA,dates)
LWDB<-odbcConnectAccess(DBSource)
library(RODBC)
LWDB<-odbcConnectAccess(DBSource)
#Query the 3 separate databases
if(timediff>730||is.na(timediff)){
DataHis<-sqlQuery(LWDB,paste("select Value, Date from DailyDataFullRec where StationNumber =",StationNumber))
}
if(timediff>59||is.na(timediff)){
Data2year<-sqlQuery(LWDB,paste("select Value, Date from DailyData2Years where StationNumber =",StationNumber))
}
Data60Day<-sqlQuery(LWDB,paste("select Value, Date from DailyData60Days where StationNumber =",StationNumber))
odbcClose(LWDB)
}
DBSource
